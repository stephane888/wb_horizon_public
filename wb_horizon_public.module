<?php
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\system\Entity\Menu;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Entity\File;
use Drupal\Core\File\FileSystemInterface;
use Stephane888\Debug\Repositories\ConfigDrupal;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 *
 * @file
 * Primary module hooks for wb-horizon public module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
/**
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param int $form_id
 */
function wb_horizon_public_form_commerce_order_item_add_to_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $configs = ConfigDrupal::config('wb_horizon_public.defaultconfigbydomain');
  /**
   * On surcharge le texte add to cart.
   */
  if (!empty($configs['commerce']['texte_add_to_cart'])) {
    // 1 par defaut
    if (!empty($form['actions']['submit']['#value'])) {
      $form['actions']['submit']['#value'] = t($configs['commerce']['texte_add_to_cart']);
    }
    // 2 apres surcharge du bouton
    if (!empty($form['actions']['custom_submit'][1]['#value'])) {
      $form['actions']['custom_submit'][1]['#value'] = t($configs['commerce']['texte_add_to_cart']);
    }
    // 3 apres surcharge du bouton et quantité
    if (!empty($form['contain-qty-add'][1][0]['custom_submit'][1]['#value'])) {
      $form['contain-qty-add'][1][0]['custom_submit'][1]['#value'] = t($configs['commerce']['texte_add_to_cart']);
    }
  }
}

/**
 * implement hook_form_alter
 * Permet d'alterer les champs.
 */
function wb_horizon_public_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // alter la valeur les valeurs du panier.
  if (!empty($form['#form_id']) && str_contains($form['#form_id'], 'commerce_cart_form')) {
    $configs = ConfigDrupal::config('wb_horizon_public.defaultconfigbydomain');
    if (!empty($form['actions']['container'][1])) {
      $form['actions']['container'][1]['#value'] = t($configs['commerce']['checkout_button_text']);
      if (!empty($form['actions']['container'][1]['#html_value'][0])) {
        $form['actions']['container'][1]['#html_value'][0]['#value'] = t($configs['commerce']['checkout_button_text']);
      }
    }
  }
}

/**
 * Attention on a deux sauvegarde, avec des struture de données differente.
 * Structure : 1
 * default_image" => array:5 [▼
 * "uuid" => array:4 [▼
 * "fids" => array:1 [▶]
 * "upload_button" => Drupal\Core\StringTranslation\TranslatableMarkup {#3172 ▶}
 * "remove_button" => Drupal\Core\StringTranslation\TranslatableMarkup {#3173 ▶}
 * "upload" => ""
 * ],
 * "alt" => ""
 * ...
 *
 * Structure : 2
 * "default_image" => array:5 [▼
 * "uuid" => "0b6d5370-8a83-4453-aa61-c9201199b2be"
 * "alt" => ""
 * ...
 *
 * @param array $entity_type
 * @param Menu $menu
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _wb_horizon_public_image_image_third_party_settings($entity_type, FieldConfig $FieldConfig, &$form, FormStateInterface $form_state) {
  // On verifie si une image par defaut est ajouté, alors ajoute cette cette
  // image directement dans la config.
  $settings = $form_state->getValue('settings');
  
  // Sauvegarde 1
  if (!empty($settings['default_image']['uuid']['fids'])) {
    $fid = reset($settings['default_image']['uuid']['fids']);
    $file = \Drupal\file\Entity\File::load($fid);
    // dump($file->getMimeType());
    // die();
    // On ajoute l'image par defaut au format : default_image_data; ( Default
    // icon encoded as data URL scheme (RFC 2397). )
    $imgBase64 = 'data:' . $file->getMimeType() . ';base64,' . base64_encode(file_get_contents($file->getFileUri()));
    $FieldConfig->setThirdPartySetting('wb_horizon_public', 'default_image_data', $imgBase64);
    return;
  }
  // Sauvegarde 2
  elseif (!empty($settings['default_image']['uuid'])) {
    return;
  }
  $FieldConfig->unsetThirdPartySetting('wb_horizon_public', 'default_image_data');
}

/**
 * hook_form_BASE_FORM_ID_alter()
 */
function wb_horizon_public_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::messenger()->addStatus(" Ajout d'une configuration specifique sur les champs images ");
  if (!empty($form['settings']['default_image'])) {
    /**
     *
     * @var \Drupal\field_ui\Form\FieldConfigEditForm $formObject
     */
    $formObject = $form_state->getFormObject();
    /**
     *
     * @var \Drupal\field\Entity\FieldConfig $entity
     */
    $entity = $formObject->getEntity();
    // dump($entity->toArray());
    $form['#entity_builders'][] = '_wb_horizon_public_image_image_third_party_settings';
  }
}

/**
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 */
function wb_horizon_public_field_config_insert(Drupal\field\Entity\FieldConfig $entity) {
  //
  if ($entity->get('field_type') == 'image') {
    
    $entityConf = $entity->toArray();
    
    /**
     * Recuperer l'image qui est definit dans
     * third_party_settings.wb_horizon_public.default_image_data et le definit
     * comme image par defaut.
     */
    if (!empty($entityConf['settings']['default_image']['uuid'])) {
      /**
       *
       * @var \Drupal\Core\Entity\EntityRepository $entityRepository
       */
      $entityRepository = \Drupal::service('entity.repository');
      $file = $entityRepository->loadEntityByUuid('file', $entityConf['settings']['default_image']['uuid']);
      if (empty($file) && !empty($entityConf['third_party_settings']['wb_horizon_public']['default_image_data'])) {
        \Drupal::messenger()->addStatus(' Maj du champs de type : IMAGE ...');
        $icon_data = fopen($entityConf['third_party_settings']['wb_horizon_public']['default_image_data'], 'r');
        //
        // Compose the default icon file destination.
        $icon_meta = stream_get_meta_data($icon_data);
        
        // File extension from MIME, only JPG/JPEG, PNG and SVG expected.
        [
          $l,
          $icon_file_ext
        ] = explode('image/', $icon_meta['mediatype']);
        // SVG special case.
        if ($icon_file_ext == 'svg+xml') {
          $icon_file_ext = 'svg';
        }
        if (empty($icon_file_ext))
          $icon_file_ext = 'png';
        
        $filesystem = \Drupal::service('file_system');
        $icon_upload_path = 'public://paragraphs_type_icon_import/';
        $id = $entity->get('entity_type') . '_' . $entity->get('field_name') . rand(0, 999);
        $icon_file_destination = $icon_upload_path . $id . '.' . $icon_file_ext;
        
        $filesystem->prepareDirectory($icon_upload_path, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
        // Save the default icon file.
        $icon_file_uri = $filesystem->saveData($icon_data, $icon_file_destination);
        // Create the icon file entity.
        $icon_entity_values = [
          'uri' => $icon_file_uri,
          'uid' => \Drupal::currentUser()->id(),
          'uuid' => $entityConf['settings']['default_image']['uuid'],
          'status' => FILE_STATUS_PERMANENT
        ];
        $new_icon = File::create($icon_entity_values);
        $new_icon->save();
        // file usage
        if ($new_icon->id()) {
          /** @var \Drupal\file\FileUsage\DatabaseFileUsageBackend $file_usage */
          $file_usage = \Drupal::service('file.usage');
          // Add usage of the new icon file.
          $file_usage->add($new_icon, 'paragraphs', 'paragraphs_type', $id);
        }
      }
    }
  }
}

/**
 *
 * @param array $fields
 * @param array $context
 */
function wb_horizon_public_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['entity_type'] == 'paragraph') {
    $fields['id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields['callback_layout_edit'] = [
      'type' => 'callback',
      'label' => t('Edit config'),
      'callback' => '\Drupal\wb_horizon_public\WbHorizonPublic::getRouteToedit',
      'weight' => 10
    ];
  }
  elseif ($context['entity_type'] == 'blocks_contents') {
    $fields['id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields['type'] = [
      'type' => 'field',
      'label' => 'Type',
      'weight' => 0
    ];
    $fields['callback_layout_url'] = [
      'type' => 'callback',
      'label' => t('Edition externe'),
      'callback' => '\Drupal\wb_horizon_public\WbHorizonPublic::manageBlocksContents',
      'weight' => 10
    ];
  }
  elseif ($context['entity_type'] == 'commerce_product') {
    $fields['product_id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields['callback_layout_url'] = [
      'type' => 'callback',
      'label' => t('Variations du produit'),
      'callback' => '\Drupal\wb_horizon_public\WbHorizonPublic::getRouteVariations',
      'weight' => 10
    ];
  }
  elseif ($context['entity_type'] == 'node') {
    $fields['nid'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields['type'] = [
      'type' => 'field',
      'label' => 'Type',
      'weight' => 0
    ];
    $fields['callback_layout_url'] = [
      'type' => 'callback',
      'label' => t('edition externe'),
      'callback' => '\Drupal\wb_horizon_public\WbHorizonPublic::manageNode',
      'weight' => 10
    ];
  }
}

/**
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param int $form_id
 */
function wb_horizon_public_form_commerce_product_menu_edit_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /**
   *
   * @var \Drupal\commerce_product\Entity\Product $Product
   */
  $Product = $form_state->getFormObject()->getEntity();
  if (!$Product->isNew()) {
    $form['actions']['duplicate'] = [
      '#type' => 'submit',
      '#value' => 'Dupliquer le produit et ses variations',
      '#button_type' => 'secondary',
      '#submit' => [
        '_wb_horizon_public_entityDuplicate'
      ],
      '#weight' => 20
    ];
  }
}

/**
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _wb_horizon_public_entityDuplicate(array $form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\commerce_product\Entity\Product $Product
   */
  $Product = $form_state->getFormObject()->getEntity();
  $ProductClone = $Product->createDuplicate();
  
  /**
   *
   * @var \Drupal\vuejs_entity\Services\DuplicateEntityReference $DuplicateEntityReference
   */
  $DuplicateEntityReference = \Drupal::service('vuejs_entity.duplicate.entity');
  $datas = [];
  $DuplicateEntityReference->duplicateProduct($Product, $ProductClone, true, \Drupal::currentUser()->id(), $datas);
  \Drupal::request()->query->remove('destination');
  $form_state->setRedirect("entity.commerce_product.edit_form", [
    'commerce_product' => $ProductClone->id()
  ]);
}

/**
 * implement hook_entity_base_field_info
 * ND: il faut executer "drush entup" pour que les champs soit MAJ dans la bd.
 *
 * @param EntityTypeInterface $entity_type
 *
 */
function wb_horizon_public_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'paragraph') {
    /**
     * Afin de ressoudre le probleme d'identification du proprietaire d'un
     * paragraphe, on ajoute un champs wbh_user_id.
     */
    $fields['wbh_user_id'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' Auteur (wbh)'))->setDescription(t('The user ID of author of the paragraph entity.'))->setDisplayOptions('form', [ //
    ])->setRevisionable(TRUE)->setSetting('target_type', 'user')->setSetting('handler', 'default')->setDisplayOptions('view', [ //
    ])->setDescription("Idealement on doit pouvoir identifier le paragraph à partir de l'entité parente.")->setDisplayConfigurable('form', true)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\wb_horizon_public\WbHorizonPublic::getCurrentUserId');
  }
  return $fields;
}



